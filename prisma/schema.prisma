generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  articles      Article[]
  comments      Comment[]
  createdAt     DateTime  @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ArticleStatement {
  id        String    @id @default(cuid())
  title     String
  prompt    String // statement or detailed description
  articles  Article[] // all articles linked to this statement
  upVotes   Int       @default(0)
  downVotes Int       @default(0)
  createdAt DateTime  @default(now())
}

model Article {
  id          String            @id @default(cuid())
  title       String
  content     String
  user        User              @relation(fields: [userId], references: [id])
  userId      String
  statement   ArticleStatement? @relation(fields: [statementId], references: [id])
  statementId String? // optional (null for freestyle writing)
  score       Int
  isPublic    Boolean           @default(false)
  upVotes     Int?              @default(0)
  downVotes   Int?              @default(0)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  comments    Comment[]
}

model Comment {
  id              String    @id @default(cuid())
  content         String
  author          User      @relation(fields: [authorId], references: [id])
  authorId        String
  article         Article?   @relation(fields: [articleId], references: [id])
  articleId       String?
  parentComment   Comment?  @relation("replies", fields: [parentCommentId], references: [id])
  parentCommentId String?
  replies         Comment[] @relation("replies")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}
